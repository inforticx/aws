---
Parameters:
  AccessKeysRotatedParamMaxAccessKeyAge:
    Type: "String"
    Default: "90"
  AcmCertificateExpirationCheckParamDaysToExpiration:
    Type: "String"
    Default: "90"
  GuarddutyNonArchivedFindingsParamDaysHighSev:
    Type: "String"
    Default: "1"
  GuarddutyNonArchivedFindingsParamDaysLowSev:
    Type: "String"
    Default: "30"
  GuarddutyNonArchivedFindingsParamDaysMediumSev:
    Type: "String"
    Default: "7"
  IamPasswordPolicyParamMaxPasswordAge:
    Type: "String"
    Default: "90"
  IamPasswordPolicyParamMinimumPasswordLength:
    Type: "String"
    Default: "14"
  IamPasswordPolicyParamPasswordReusePrevention:
    Type: "String"
    Default: "24"
  IamPasswordPolicyParamRequireLowercaseCharacters:
    Type: "String"
    Default: "TRUE"
  IamPasswordPolicyParamRequireNumbers:
    Type: "String"
    Default: "TRUE"
  IamPasswordPolicyParamRequireSymbols:
    Type: "String"
    Default: "TRUE"
  IamPasswordPolicyParamRequireUppercaseCharacters:
    Type: "String"
    Default: "TRUE"
  IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge:
    Type: "String"
    Default: "90"
  RestrictedIncomingTrafficParamBlockedPort1:
    Type: "String"
    Default: "20"
  RestrictedIncomingTrafficParamBlockedPort2:
    Type: "String"
    Default: "21"
  RestrictedIncomingTrafficParamBlockedPort3:
    Type: "String"
    Default: "3389"
  RestrictedIncomingTrafficParamBlockedPort4:
    Type: "String"
    Default: "3306"
  RestrictedIncomingTrafficParamBlockedPort5:
    Type: "String"
    Default: "4333"
  S3AccountLevelPublicAccessBlocksParamBlockPublicAcls:
    Type: "String"
    Default: "True"
  S3AccountLevelPublicAccessBlocksParamBlockPublicPolicy:
    Type: "String"
    Default: "True"
  S3AccountLevelPublicAccessBlocksParamIgnorePublicAcls:
    Type: "String"
    Default: "True"
  S3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets:
    Type: "String"
    Default: "True"
Mappings: {}
Conditions:
  accessKeysRotatedParamMaxAccessKeyAge:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "AccessKeysRotatedParamMaxAccessKeyAge"
  acmCertificateExpirationCheckParamDaysToExpiration:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "AcmCertificateExpirationCheckParamDaysToExpiration"
  guarddutyNonArchivedFindingsParamDaysHighSev:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "GuarddutyNonArchivedFindingsParamDaysHighSev"
  guarddutyNonArchivedFindingsParamDaysLowSev:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "GuarddutyNonArchivedFindingsParamDaysLowSev"
  guarddutyNonArchivedFindingsParamDaysMediumSev:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "GuarddutyNonArchivedFindingsParamDaysMediumSev"
  iamPasswordPolicyParamMaxPasswordAge:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamMaxPasswordAge"
  iamPasswordPolicyParamMinimumPasswordLength:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamMinimumPasswordLength"
  iamPasswordPolicyParamPasswordReusePrevention:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamPasswordReusePrevention"
  iamPasswordPolicyParamRequireLowercaseCharacters:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamRequireLowercaseCharacters"
  iamPasswordPolicyParamRequireNumbers:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamRequireNumbers"
  iamPasswordPolicyParamRequireSymbols:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamRequireSymbols"
  iamPasswordPolicyParamRequireUppercaseCharacters:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamPasswordPolicyParamRequireUppercaseCharacters"
  iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
  restrictedIncomingTrafficParamBlockedPort1:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "RestrictedIncomingTrafficParamBlockedPort1"
  restrictedIncomingTrafficParamBlockedPort2:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "RestrictedIncomingTrafficParamBlockedPort2"
  restrictedIncomingTrafficParamBlockedPort3:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "RestrictedIncomingTrafficParamBlockedPort3"
  restrictedIncomingTrafficParamBlockedPort4:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "RestrictedIncomingTrafficParamBlockedPort4"
  restrictedIncomingTrafficParamBlockedPort5:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "RestrictedIncomingTrafficParamBlockedPort5"
  s3AccountLevelPublicAccessBlocksParamBlockPublicAcls:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "S3AccountLevelPublicAccessBlocksParamBlockPublicAcls"
  s3AccountLevelPublicAccessBlocksParamBlockPublicPolicy:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "S3AccountLevelPublicAccessBlocksParamBlockPublicPolicy"
  s3AccountLevelPublicAccessBlocksParamIgnorePublicAcls:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "S3AccountLevelPublicAccessBlocksParamIgnorePublicAcls"
  s3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets:
    Fn::Not:
    - Fn::Equals:
      - ""
      - Ref: "S3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets"
Rules: {}
Resources:
  AccessKeysRotated:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "access-keys-rotated-conformance-pack-7tyivkdxe"
      InputParameters:
        maxAccessKeyAge:
          Fn::If:
          - "accessKeysRotatedParamMaxAccessKeyAge"
          - Ref: "AccessKeysRotatedParamMaxAccessKeyAge"
          - Ref: "AWS::NoValue"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ACCESS_KEYS_ROTATED"
  AcmCertificateExpirationCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "acm-certificate-expiration-check-conformance-pack-7tyivkdxe"
      InputParameters:
        daysToExpiration:
          Fn::If:
          - "acmCertificateExpirationCheckParamDaysToExpiration"
          - Ref: "AcmCertificateExpirationCheckParamDaysToExpiration"
          - Ref: "AWS::NoValue"
      Scope:
        ComplianceResourceTypes:
        - "AWS::ACM::Certificate"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ACM_CERTIFICATE_EXPIRATION_CHECK"
  AlbHttpToHttpsRedirectionCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "alb-http-to-https-redirection-check-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK"
  ApiGwCacheEnabledAndEncrypted:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "api-gw-cache-enabled-and-encrypted-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::ApiGateway::Stage"
      Source:
        Owner: "AWS"
        SourceIdentifier: "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
  ApiGwExecutionLoggingEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "api-gw-execution-logging-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::ApiGateway::Stage"
        - "AWS::ApiGatewayV2::Stage"
      Source:
        Owner: "AWS"
        SourceIdentifier: "API_GW_EXECUTION_LOGGING_ENABLED"
  AutoscalingGroupElbHealthcheckRequired:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "autoscaling-group-elb-healthcheck-required-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::AutoScaling::AutoScalingGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED"
  CloudTrailCloudWatchLogsEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloud-trail-cloud-watch-logs-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED"
  CloudTrailEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloudtrail-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUD_TRAIL_ENABLED"
  CloudTrailEncryptionEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloud-trail-encryption-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUD_TRAIL_ENCRYPTION_ENABLED"
  CloudTrailLogFileValidationEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloud-trail-log-file-validation-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED"
  CloudtrailS3DataeventsEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloudtrail-s3-dataevents-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUDTRAIL_S3_DATAEVENTS_ENABLED"
  CloudwatchAlarmActionCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloudwatch-alarm-action-check-conformance-pack-7tyivkdxe"
      InputParameters:
        alarmActionRequired: "TRUE"
        insufficientDataActionRequired: "TRUE"
        okActionRequired: "FALSE"
      Scope:
        ComplianceResourceTypes:
        - "AWS::CloudWatch::Alarm"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUDWATCH_ALARM_ACTION_CHECK"
  CloudwatchLogGroupEncrypted:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "cloudwatch-log-group-encrypted-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CLOUDWATCH_LOG_GROUP_ENCRYPTED"
  CodebuildProjectEnvvarAwscredCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "codebuild-project-envvar-awscred-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::CodeBuild::Project"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK"
  CodebuildProjectSourceRepoUrlCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "codebuild-project-source-repo-url-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::CodeBuild::Project"
      Source:
        Owner: "AWS"
        SourceIdentifier: "CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK"
  DbInstanceBackupEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "db-instance-backup-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::RDS::DBInstance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "DB_INSTANCE_BACKUP_ENABLED"
  DmsReplicationNotPublic:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "dms-replication-not-public-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes: []
      Source:
        Owner: "AWS"
        SourceIdentifier: "DMS_REPLICATION_NOT_PUBLIC"
  DynamodbAutoscalingEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "dynamodb-autoscaling-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::DynamoDB::Table"
      Source:
        Owner: "AWS"
        SourceIdentifier: "DYNAMODB_AUTOSCALING_ENABLED"
  DynamodbPitrEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "dynamodb-pitr-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::DynamoDB::Table"
      Source:
        Owner: "AWS"
        SourceIdentifier: "DYNAMODB_PITR_ENABLED"
  DynamodbThroughputLimitCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "dynamodb-throughput-limit-check-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "DYNAMODB_THROUGHPUT_LIMIT_CHECK"
  EbsOptimizedInstance:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ebs-optimized-instance-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Instance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EBS_OPTIMIZED_INSTANCE"
  EbsSnapshotPublicRestorableCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ebs-snapshot-public-restorable-check-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK"
  Ec2InstanceDetailedMonitoringEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-instance-detailed-monitoring-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Instance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_INSTANCE_DETAILED_MONITORING_ENABLED"
  Ec2InstanceManagedBySsm:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-instance-managed-by-systems-manager-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Instance"
        - "AWS::SSM::ManagedInstanceInventory"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_INSTANCE_MANAGED_BY_SSM"
  Ec2InstanceNoPublicIp:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-instance-no-public-ip-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Instance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_INSTANCE_NO_PUBLIC_IP"
  Ec2ManagedinstanceAssociationComplianceStatusCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-managedinstance-association-compliance-status-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::SSM::AssociationCompliance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK"
  Ec2ManagedinstancePatchComplianceStatusCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-managedinstance-patch-compliance-status-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::SSM::PatchCompliance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK"
  Ec2SecurityGroupAttachedToEni:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-security-group-attached-to-eni-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::SecurityGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_SECURITY_GROUP_ATTACHED_TO_ENI"
  Ec2StoppedInstance:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-stopped-instance-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_STOPPED_INSTANCE"
  Ec2VolumeInuseCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-volume-inuse-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Volume"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EC2_VOLUME_INUSE_CHECK"
  EfsEncryptedCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "efs-encrypted-check-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EFS_ENCRYPTED_CHECK"
  EipAttached:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "eip-attached-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::EIP"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EIP_ATTACHED"
  ElasticacheRedisClusterAutomaticBackupCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "elasticache-redis-cluster-automatic-backup-check-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ELASTICACHE_REDIS_CLUSTER_AUTOMATIC_BACKUP_CHECK"
  ElasticsearchEncryptedAtRest:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "elasticsearch-encrypted-at-rest-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ELASTICSEARCH_ENCRYPTED_AT_REST"
  ElasticsearchInVpcOnly:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "elasticsearch-in-vpc-only-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ELASTICSEARCH_IN_VPC_ONLY"
  ElbAcmCertificateRequired:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "elb-acm-certificate-required-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::ElasticLoadBalancing::LoadBalancer"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ELB_ACM_CERTIFICATE_REQUIRED"
  ElbDeletionProtectionEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "elb-deletion-protection-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ELB_DELETION_PROTECTION_ENABLED"
  ElbLoggingEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "elb-logging-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::ElasticLoadBalancing::LoadBalancer"
        - "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ELB_LOGGING_ENABLED"
  EmrKerberosEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "emr-kerberos-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "EMR_KERBEROS_ENABLED"
  EmrMasterNoPublicIp:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "emr-master-no-public-ip-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes: []
      Source:
        Owner: "AWS"
        SourceIdentifier: "EMR_MASTER_NO_PUBLIC_IP"
  EncryptedVolumes:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "encrypted-volumes-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Volume"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ENCRYPTED_VOLUMES"
  GuarddutyEnabledCentralized:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "guardduty-enabled-centralized-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "GUARDDUTY_ENABLED_CENTRALIZED"
  GuarddutyNonArchivedFindings:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "guardduty-non-archived-findings-conformance-pack-7tyivkdxe"
      InputParameters:
        daysHighSev:
          Fn::If:
          - "guarddutyNonArchivedFindingsParamDaysHighSev"
          - Ref: "GuarddutyNonArchivedFindingsParamDaysHighSev"
          - Ref: "AWS::NoValue"
        daysLowSev:
          Fn::If:
          - "guarddutyNonArchivedFindingsParamDaysLowSev"
          - Ref: "GuarddutyNonArchivedFindingsParamDaysLowSev"
          - Ref: "AWS::NoValue"
        daysMediumSev:
          Fn::If:
          - "guarddutyNonArchivedFindingsParamDaysMediumSev"
          - Ref: "GuarddutyNonArchivedFindingsParamDaysMediumSev"
          - Ref: "AWS::NoValue"
      Source:
        Owner: "AWS"
        SourceIdentifier: "GUARDDUTY_NON_ARCHIVED_FINDINGS"
  IamGroupHasUsersCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-group-has-users-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::IAM::Group"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_GROUP_HAS_USERS_CHECK"
  IamPasswordPolicy:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-password-policy-conformance-pack-7tyivkdxe"
      InputParameters:
        MaxPasswordAge:
          Fn::If:
          - "iamPasswordPolicyParamMaxPasswordAge"
          - Ref: "IamPasswordPolicyParamMaxPasswordAge"
          - Ref: "AWS::NoValue"
        MinimumPasswordLength:
          Fn::If:
          - "iamPasswordPolicyParamMinimumPasswordLength"
          - Ref: "IamPasswordPolicyParamMinimumPasswordLength"
          - Ref: "AWS::NoValue"
        PasswordReusePrevention:
          Fn::If:
          - "iamPasswordPolicyParamPasswordReusePrevention"
          - Ref: "IamPasswordPolicyParamPasswordReusePrevention"
          - Ref: "AWS::NoValue"
        RequireLowercaseCharacters:
          Fn::If:
          - "iamPasswordPolicyParamRequireLowercaseCharacters"
          - Ref: "IamPasswordPolicyParamRequireLowercaseCharacters"
          - Ref: "AWS::NoValue"
        RequireNumbers:
          Fn::If:
          - "iamPasswordPolicyParamRequireNumbers"
          - Ref: "IamPasswordPolicyParamRequireNumbers"
          - Ref: "AWS::NoValue"
        RequireSymbols:
          Fn::If:
          - "iamPasswordPolicyParamRequireSymbols"
          - Ref: "IamPasswordPolicyParamRequireSymbols"
          - Ref: "AWS::NoValue"
        RequireUppercaseCharacters:
          Fn::If:
          - "iamPasswordPolicyParamRequireUppercaseCharacters"
          - Ref: "IamPasswordPolicyParamRequireUppercaseCharacters"
          - Ref: "AWS::NoValue"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_PASSWORD_POLICY"
  IamPolicyNoStatementsWithAdminAccess:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-policy-no-statements-with-admin-access-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::IAM::Policy"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
  IamRootAccessKeyCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-root-access-key-check-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_ROOT_ACCESS_KEY_CHECK"
  IamUserGroupMembershipCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-user-group-membership-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::IAM::User"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_USER_GROUP_MEMBERSHIP_CHECK"
  IamUserMfaEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-user-mfa-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_USER_MFA_ENABLED"
  IamUserNoPoliciesCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-user-no-policies-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::IAM::User"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_USER_NO_POLICIES_CHECK"
  IamUserUnusedCredentialsCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "iam-user-unused-credentials-check-conformance-pack-7tyivkdxe"
      InputParameters:
        maxCredentialUsageAge:
          Fn::If:
          - "iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
          - Ref: "IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge"
          - Ref: "AWS::NoValue"
      Source:
        Owner: "AWS"
        SourceIdentifier: "IAM_USER_UNUSED_CREDENTIALS_CHECK"
  IncomingSshDisabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "restricted-ssh-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::SecurityGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "INCOMING_SSH_DISABLED"
  InstancesInVpc:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-instances-in-vpc-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::Instance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "INSTANCES_IN_VPC"
  InternetGatewayAuthorizedVpcOnly:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "internet-gateway-authorized-vpc-only-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::InternetGateway"
      Source:
        Owner: "AWS"
        SourceIdentifier: "INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY"
  KmsCmkNotScheduledForDeletion:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "kms-cmk-not-scheduled-for-deletion-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::KMS::Key"
      Source:
        Owner: "AWS"
        SourceIdentifier: "KMS_CMK_NOT_SCHEDULED_FOR_DELETION"
  LambdaConcurrencyCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "lambda-concurrency-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Lambda::Function"
      Source:
        Owner: "AWS"
        SourceIdentifier: "LAMBDA_CONCURRENCY_CHECK"
  LambdaDlqCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "lambda-dlq-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Lambda::Function"
      Source:
        Owner: "AWS"
        SourceIdentifier: "LAMBDA_DLQ_CHECK"
  LambdaFunctionPublicAccessProhibited:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "lambda-function-public-access-prohibited-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Lambda::Function"
      Source:
        Owner: "AWS"
        SourceIdentifier: "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
  LambdaInsideVpc:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "lambda-inside-vpc-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Lambda::Function"
      Source:
        Owner: "AWS"
        SourceIdentifier: "LAMBDA_INSIDE_VPC"
  MfaEnabledForIamConsoleAccess:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "mfa-enabled-for-iam-console-access-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
  MultiRegionCloudTrailEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "multi-region-cloudtrail-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "MULTI_REGION_CLOUD_TRAIL_ENABLED"
  RdsEnhancedMonitoringEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-enhanced-monitoring-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::RDS::DBInstance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_ENHANCED_MONITORING_ENABLED"
  RdsInstancePublicAccessCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-instance-public-access-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::RDS::DBInstance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
  RdsMultiAzSupport:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-multi-az-support-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::RDS::DBInstance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_MULTI_AZ_SUPPORT"
  RdsSnapshotsPublicProhibited:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-snapshots-public-prohibited-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::RDS::DBSnapshot"
        - "AWS::RDS::DBClusterSnapshot"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
  RdsStorageEncrypted:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "rds-storage-encrypted-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::RDS::DBInstance"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RDS_STORAGE_ENCRYPTED"
  RedshiftClusterConfigurationCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "redshift-cluster-configuration-check-conformance-pack-7tyivkdxe"
      InputParameters:
        clusterDbEncrypted: "TRUE"
        loggingEnabled: "TRUE"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Redshift::Cluster"
      Source:
        Owner: "AWS"
        SourceIdentifier: "REDSHIFT_CLUSTER_CONFIGURATION_CHECK"
  RedshiftClusterPublicAccessCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "redshift-cluster-public-access-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Redshift::Cluster"
      Source:
        Owner: "AWS"
        SourceIdentifier: "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
  RedshiftRequireTlsSsl:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "redshift-require-tls-ssl-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::Redshift::Cluster"
      Source:
        Owner: "AWS"
        SourceIdentifier: "REDSHIFT_REQUIRE_TLS_SSL"
  RestrictedIncomingTraffic:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "restricted-common-ports-conformance-pack-7tyivkdxe"
      InputParameters:
        blockedPort1:
          Fn::If:
          - "restrictedIncomingTrafficParamBlockedPort1"
          - Ref: "RestrictedIncomingTrafficParamBlockedPort1"
          - Ref: "AWS::NoValue"
        blockedPort2:
          Fn::If:
          - "restrictedIncomingTrafficParamBlockedPort2"
          - Ref: "RestrictedIncomingTrafficParamBlockedPort2"
          - Ref: "AWS::NoValue"
        blockedPort3:
          Fn::If:
          - "restrictedIncomingTrafficParamBlockedPort3"
          - Ref: "RestrictedIncomingTrafficParamBlockedPort3"
          - Ref: "AWS::NoValue"
        blockedPort4:
          Fn::If:
          - "restrictedIncomingTrafficParamBlockedPort4"
          - Ref: "RestrictedIncomingTrafficParamBlockedPort4"
          - Ref: "AWS::NoValue"
        blockedPort5:
          Fn::If:
          - "restrictedIncomingTrafficParamBlockedPort5"
          - Ref: "RestrictedIncomingTrafficParamBlockedPort5"
          - Ref: "AWS::NoValue"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::SecurityGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "RESTRICTED_INCOMING_TRAFFIC"
  RootAccountHardwareMfaEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "root-account-hardware-mfa-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ROOT_ACCOUNT_HARDWARE_MFA_ENABLED"
  RootAccountMfaEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "root-account-mfa-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "ROOT_ACCOUNT_MFA_ENABLED"
  S3AccountLevelPublicAccessBlocks:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-account-level-public-access-blocks-conformance-pack-7tyivkdxe"
      InputParameters:
        BlockPublicAcls:
          Fn::If:
          - "s3AccountLevelPublicAccessBlocksParamBlockPublicAcls"
          - Ref: "S3AccountLevelPublicAccessBlocksParamBlockPublicAcls"
          - Ref: "AWS::NoValue"
        BlockPublicPolicy:
          Fn::If:
          - "s3AccountLevelPublicAccessBlocksParamBlockPublicPolicy"
          - Ref: "S3AccountLevelPublicAccessBlocksParamBlockPublicPolicy"
          - Ref: "AWS::NoValue"
        IgnorePublicAcls:
          Fn::If:
          - "s3AccountLevelPublicAccessBlocksParamIgnorePublicAcls"
          - Ref: "S3AccountLevelPublicAccessBlocksParamIgnorePublicAcls"
          - Ref: "AWS::NoValue"
        RestrictPublicBuckets:
          Fn::If:
          - "s3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets"
          - Ref: "S3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets"
          - Ref: "AWS::NoValue"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::AccountPublicAccessBlock"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS"
  S3BucketDefaultLockEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-default-lock-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_DEFAULT_LOCK_ENABLED"
  S3BucketLoggingEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-logging-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_LOGGING_ENABLED"
  S3BucketPolicyGranteeCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-policy-grantee-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_POLICY_GRANTEE_CHECK"
  S3BucketPublicReadProhibited:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-public-read-prohibited-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_PUBLIC_READ_PROHIBITED"
  S3BucketPublicWriteProhibited:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-public-write-prohibited-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
  S3BucketReplicationEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-replication-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_REPLICATION_ENABLED"
  S3BucketServerSideEncryptionEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-server-side-encryption-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
  S3BucketSslRequestsOnly:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-ssl-requests-only-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_SSL_REQUESTS_ONLY"
  S3BucketVersioningEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "s3-bucket-versioning-enabled-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::S3::Bucket"
      Source:
        Owner: "AWS"
        SourceIdentifier: "S3_BUCKET_VERSIONING_ENABLED"
  SagemakerEndpointConfigurationKmsKeyConfigured:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "sagemaker-endpoint-configuration-kms-key-configured-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED"
  SagemakerNotebookInstanceKmsKeyConfigured:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "sagemaker-notebook-instance-kms-key-configured-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED"
  SagemakerNotebookNoDirectInternetAccess:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "sagemaker-notebook-no-direct-internet-access-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS"
  SecretsmanagerRotationEnabledCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "secretsmanager-rotation-enabled-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::SecretsManager::Secret"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SECRETSMANAGER_ROTATION_ENABLED_CHECK"
  SecretsmanagerScheduledRotationSuccessCheck:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "secretsmanager-scheduled-rotation-success-check-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::SecretsManager::Secret"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK"
  SecurityhubEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "securityhub-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SECURITYHUB_ENABLED"
  SnsEncryptedKms:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "sns-encrypted-kms-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::SNS::Topic"
      Source:
        Owner: "AWS"
        SourceIdentifier: "SNS_ENCRYPTED_KMS"
  VpcDefaultSecurityGroupClosed:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "vpc-default-security-group-closed-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::SecurityGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "VPC_DEFAULT_SECURITY_GROUP_CLOSED"
  VpcFlowLogsEnabled:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "vpc-flow-logs-enabled-conformance-pack-7tyivkdxe"
      Source:
        Owner: "AWS"
        SourceIdentifier: "VPC_FLOW_LOGS_ENABLED"
  VpcSgOpenOnlyToAuthorizedPorts:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "vpc-sg-open-only-to-authorized-ports-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::SecurityGroup"
      Source:
        Owner: "AWS"
        SourceIdentifier: "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
  VpcVpn2TunnelsUp:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "vpc-vpn-2-tunnels-up-conformance-pack-7tyivkdxe"
      Scope:
        ComplianceResourceTypes:
        - "AWS::EC2::VPNConnection"
      Source:
        Owner: "AWS"
        SourceIdentifier: "VPC_VPN_2_TUNNELS_UP"
Outputs: {}
AWSTemplateFormatVersion: "2010-09-09"
Hooks: {}
